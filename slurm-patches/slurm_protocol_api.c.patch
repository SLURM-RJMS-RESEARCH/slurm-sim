*** slurm/src/common/slurm_protocol_api.c	2013-08-28 18:04:00.430701901 +0200
--- ../sim_test_dir/slurm/src/common/slurm_protocol_api.c	2012-11-29 13:00:13.000000000 +0100
***************
*** 2067,2073 ****
  
  	for (retry=0; retry<slurm_get_msg_timeout(); retry++) {
  		if (retry)
! 			sleep(1);
  		if (working_cluster_rec) {
  			if (working_cluster_rec->control_addr.sin_port == 0) {
  				slurm_set_addr(
--- 2067,2073 ----
  
  	for (retry=0; retry<slurm_get_msg_timeout(); retry++) {
  		if (retry)
! 			usleep(1000);
  		if (working_cluster_rec) {
  			if (working_cluster_rec->control_addr.sin_port == 0) {
  				slurm_set_addr(
***************
*** 3313,3318 ****
--- 3313,3319 ----
  	slurm_conf_unlock();
  
  	while (retry) {
+ 		struct timespec waiting;
  		/* If the backup controller is in the process of assuming
  		 * control, we sleep and retry later */
  		retry = 0;
***************
*** 3333,3339 ****
  			debug("Neither primary nor backup controller "
  			      "responding, sleep and retry");
  			slurm_free_return_code_msg(resp->data);
! 			sleep(30);
  			if ((fd = slurm_open_controller_conn(&ctrl_addr))
  			    < 0) {
  				rc = -1;
--- 3334,3343 ----
  			debug("Neither primary nor backup controller "
  			      "responding, sleep and retry");
  			slurm_free_return_code_msg(resp->data);
! 			waiting.tv_sec = 30;
! 			waiting.tv_nsec = 0;
! 			nanosleep(&waiting, 0);
! 
  			if ((fd = slurm_open_controller_conn(&ctrl_addr))
  			    < 0) {
  				rc = -1;
