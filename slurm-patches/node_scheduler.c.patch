*** slurm/src/slurmctld/node_scheduler.c	2013-08-28 18:07:00.850965514 +0200
--- ../sim_test_dir/slurm/src/slurmctld/node_scheduler.c	2012-11-29 16:45:39.000000000 +0100
***************
*** 2591,2596 ****
--- 2591,2632 ----
  	last_job_id = job_ptr->job_id;
  	hostlist_destroy(kill_hostlist);
  	agent_args->msg_args = kill_job;
+ 
+ #ifndef SLURM_SIMULATOR
  	agent_queue_request(agent_args);
+ #else
+ 
+ 	{
+ 		slurm_msg_t msg, resp;
+ 		char *nodename;
+ 
+ 		slurm_msg_t_init(&msg);
+ 		msg.msg_type = REQUEST_TERMINATE_JOB;
+ 		msg.data = kill_job;
+ 
+ 		nodename = hostlist_shift(agent_args->hostlist);
+ 		info("SIM: sending message type REQUEST_TERMINATE_JOB (%d) to %s\n", kill_job->job_id, nodename);
+ 			
+ 		if(slurm_conf_get_addr(nodename, &msg.address) == SLURM_ERROR) {
+ 				error("SIM: "
+ 				      "can't find address for host %s, "
+ 				      "check slurm.conf",
+ 				      nodename);
+ 		}
+ 		if (slurm_send_recv_node_msg(&msg, &resp, 5000000) != SLURM_SUCCESS) {
+ 				error("SIM: slurm_send_only_node_msg failed\n");
+ 		}
+ 
+ 		info("SIM: REQUEST_TERMINATE_JOB (%d) to %s WAS SENT\n", kill_job->job_id, nodename);
+ 		/* Let's free memory allocated */
+ 
+ 		xfree(kill_job->nodes);
+ 		select_g_select_jobinfo_free(kill_job->select_jobinfo);
+ 		xfree(kill_job);
+ 		hostlist_destroy(agent_args->hostlist);
+ 		xfree(agent_args);
+ 	}
+ 
+ #endif
  	return;
  }
